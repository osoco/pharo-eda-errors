!! Adapter candidates

After ==EDAAJsonFileDiscoverer== reads a file, it returns dictionaries as adapter candidates. We can think of a "candidate" as something which can become an adapter after ensuring certain conditions are met. It can infer the class of adapter it fits into too.

However, ==EDAAJsonFileDiscoverer== currently returns a list of dictionaries. Let's start by fixing it. We want it to discover candidates we can ask for their nature afterwards.
We need to change all our current tests, but let's focus on the first one for now.

% ${changes:path=code/001-EDAAJsonFileDiscovererTest_testParseAFlatJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseAFlatJsonFile
	| fileContents discoverer |
	fileContents := '{
  "sample": "value"
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 1;
		assert: discoverer candidates first isNotNil;
		assert: discoverer candidates first key equals: 'sample';
		assert: discoverer candidates first value equals: 'value'
]]]

==EDAAJsonFileDiscoverer== cannot return a list of dictionaries, but a list of candidates. And a candidate have a key and a value, albeit their contents are arbitrary.

Let's start with that: defining an initial candidate class, and improve our current discoverer to build candidates instead of just dictionaries.

We need a new test class ==EDAACandidateTest==:
% ${changes:path=code/002-EDAACandidateTest.ombu}$
[[[classDefinition=true|lineNumber=true
TestCase subclass: #EDAACandidateTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Domain-Tests'
]]]

% ${changes:path=code/003-EDAACandidateTest_testBuilderMethod.ombu}$
[[[methodDefinition=true|lineNumber=true
testBuilderMethod
	| key candidate value |
	key := 'candidateKey'.
	value := 'candidateValue'.
	candidate := EDAACandidate withKey: key value: value.
	self
		assert: candidate key equals: key;
		assert: candidate value equals: value
]]]

Pharo will help us creating both the new class.

% ${changes:path=code/004-EDAACandidate.ombu}$
[[[classDefinition=true|lineNumber=true
Object subclass: #EDAACandidate
	instanceVariableNames: 'key value'
	classVariableNames: ''
	package: 'EDAA-Domain'
]]]

Let's create the accessors as usual.

% ${changes:path=code/005-EDAACandidate_key.ombu}$
[[[methodDefinition=true|lineNumber=true
key
	^ key
]]]

% ${changes:path=code/006-EDAACandidate_key_.ombu}$
[[[methodDefinition=true|lineNumber=true
key: anObject
	key := anObject
]]]

% ${changes:path=code/007-EDAACandidate_value.ombu}$
[[[methodDefinition=true|lineNumber=true
value
	^ value
]]]

% ${changes:path=code/008-EDAACandidate_value_.ombu}$
[[[methodDefinition=true|lineNumber=true
value: anObject
	value := anObject
]]]

Running the test will make Pharo want to help us creating the builder method as well.

% ${changes:path=code/009-EDAACandidate_class_withKey_value_.ombu}$
[[[methodDefinition=true|lineNumber=true
withKey: aKey value: aValue
	^ self new
		key: aKey;
		value: aValue;
		yourself
]]]

The new test now passes, and we can focus on ""testParseAFlatJsonFile"" in ==EDAAJsonFileDiscovererTest==.
To make it pass, we need to change the implementation of ==EDAJsonFileDiscoverer==. It must return a list of ==EDAACandidate== instances, not dictionaries.

% ${changes:path=code/010-EDAAJsonFileDiscoverer_processJsonFile_.ombu}$
[[[methodDefinition=true|lineNumber=true
processJsonFile: aFile
	| result map |
	result := OrderedCollection new.
	map := (NeoJSONReader on: aFile name readStream) parseMap.
	map
		keysAndValuesDo:
			[ :k :v | result add: (EDAACandidate withKey: k value: v) ].
	^ result
]]]

There're two more tests we need to fix because they are failing after our changes in the nature of the candidate list ==JsonFileDiscoverer== returns.

% ${changes:path=code/011-EDAAJsonFileDiscovererTest_testParseAnothenFlatJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseAnotherFlatJsonFile
	| fileContents discoverer |
	fileContents := '{
  "candidate1": "value1",
  "candidate2": "value2"
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 2;
		assert: discoverer candidates first isNotNil;
		assert: discoverer candidates first key equals: 'candidate1';
		assert: discoverer candidates first value equals: 'value1';
		assert: discoverer candidates second isNotNil;
		assert: discoverer candidates second key equals: 'candidate2';
		assert: discoverer candidates second value equals: 'value2'
]]]

% ${changes:path=code/012-EDAAJsonFileDiscovererTest_testParseCommandListenerAdapterInJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseCommandListenerAdapterInJsonFile
	| fileContents discoverer commandListener |
	fileContents := '{
  "commandListener": {
    "host": "localhost",
    "port": 61613,
    "user": "user",
    "password": "secret",
    "queue": "messages-to-eda",
    "durable": true,
    "ack": "client-individual",
    "prefetchCount": 1,
    "timeout": 60,
    "debug": true,
    "restartOnError": false
  }
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 1;
		assert: discoverer candidates first isNotNil.
	commandListener := discoverer candidates first.
	self
		assert: commandListener isNotNil;
		assert: commandListener key equals: 'commandListener';
		assert: (commandListener value at: 'host') equals: 'localhost';
		assert: (commandListener value at: 'port') equals: 61613;
		assert: (commandListener value at: 'user') equals: 'user';
		assert: (commandListener value at: 'password') equals: 'secret';
		assert: (commandListener value at: 'queue')
			equals: 'messages-to-eda';
		assert: (commandListener value at: 'durable') equals: true;
		assert: (commandListener value at: 'ack')
			equals: 'client-individual';
		assert: (commandListener value at: 'prefetchCount') equals: 1;
		assert: (commandListener value at: 'timeout') equals: 60;
		assert: (commandListener value at: 'debug') equals: true;
		assert: (commandListener value at: 'restartOnError') equals: false
]]]

All tests are passing again.

!!! Figuring out the adapter class

We'd like the new ==EDAACandidate== to help us figuring out the actual class of the adapter it represents.
The simplest behavior is to use class names as keys. Let's start with approach.

% ${changes:path=code/013-EDAACandidateTest_testAdapterClassAsCandidateKey.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassAsCandidateKey
	| candidate |
	candidate := EDAACandidate withKey: 'EDAAMongoEventStore' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore
]]]

We have to implement the new method ""adapterClass"".

% ${changes:path=code/014-EDAACandidate_adapterClass.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClass
	^ #EDAAMongoEventStore
]]]

This has helped us to think of the method name, but the implementation is incorrect. Let's improve the test to fix it.

% ${changes:path=code/015-EDAACandidateTest_testAdapterClassAsCandidateKey.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassAsCandidateKey
	| candidate |
	candidate := EDAACandidate withKey: 'EDAAMongoEventStore' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore.
	candidate := EDAACandidate withKey: 'EDAAMemoryEventStore' value: nil.
	self assert: candidate adapterClass equals: #EDAAMemoryEventStore
]]]

The simplest implementation of ""adapterClass"" passing the test is:

% ${changes:path=code/016-EDAACandidate_adapterClass.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClass
	^ self key asSymbol
]]]

Using adapter names as keys is a valid approach, but it's not enough for us:
- it's not the most readable format we can think of,
- it's not flexible,
- it doesn't support current PharoEDA configuration files.

We can support different approaches to figure out the class names of the adapter for a given key. A simple one is using annotations, via the ==Pragma== class, in classes using a certain trait. We use traits for this since they don't impose a hierarchy requirement.
Let's write our next test.

% ${changes:path=code/017-EDAACandidateTest_testAdapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassFromPragma
	| candidate |
	candidate := EDAACandidate withKey: 'arbitraryKey' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore
]]]

We want to provide the mapping directly in the test. Let's define a new trait, with no methods whatsoever, as a kind of Marker Interface. The name is probably not a good choice, since it actually doesn't provide any means to resolve the adapter class name.

% ${changes:path=code/018-EDAAPragmaBasedCandidateAdapterClassNameResolver.ombu}$
[[[classDefinition=true|lineNumber=true
Trait named: #EDAAPragmaBasedCandidateAdapterClassNameResolver
	 uses: {}
	 package: 'EDAA-Domain'
]]]

We can "use" it in our test now.

% ${changes:path=code/019-EDAACandidateTest.ombu}$
[[[classDefinition=true|lineNumber=true
TestCase subclass: #EDAACandidateTest
	uses: EDAAPragmaBasedCandidateAdapterClassNameResolver
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Domain-Tests'
]]]

The method to provide the mapping could be just:

% ${changes:path=code/017-EDAACandidateTest_arbitraryKey.ombu}$
[[[methodDefinition=true|lineNumber=true
arbitraryKey
	"Maps 'arbitraryKey' to #EDAAMongoEventStore"
	<edaAdapterClass: #EDAAMongoEventStore>
	^ self
]]]

To resolve the class name of the adapter, the candidate can use the trait to find its users, look for the ""edaAdapterClass"" annotation, check if the name of the method matches the key, and if so use the ==Pragma== attribute. Notice we don't use the method's return value, since we don't need to invoke it. That would impose additional requirements on how to build an instance of the class.

The ""adapterClass"" method needs to be adapted to support this new strategy. Let's make its current implementation available as another name.

% ${changes:path=code/018-EDAACandidate_adapterClassFromKey.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassFromKey
	^ self key asSymbol
]]]

We need to be able to know if a key matches an existing class.

% ${changes:path=code/019-EDAACandidate_isClassValid_.ombu}$
[[[methodDefinition=true|lineNumber=true
isClassValid: aSymbol
	^ (Smalltalk environment at: aSymbol ifAbsent: [ nil ]) isNotNil
]]]

Our new ""adapterClass"" method becomes:

% ${changes:path=code/020-EDAACandidate_adapterClass.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClass
	| result valid |
	result := self adapterClassFromKey.
	valid := self isClassValid: result.
	valid ifFalse: [ result := self adapterClassFromPragma.
	         valid := self isClassValid: result ].
	^ valid
		ifTrue: [ result ]
		ifFalse: [ nil ]
]]]

The new method ""adapterClassFromPragma""'s code matches the description above.

% ${changes:path=code/021-EDAACandidate_adapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassFromPragma
	| results annotatedClasses |
	annotatedClasses := EDAAPragmaBasedCandidateAdapterClassNameResolver
		traitUsers.
	annotatedClasses
		do: [ :annotatedClass |
			| pragmas |
			pragmas := Pragma
				allNamed: #edaAdapterClass:
				inAndBelow: annotatedClass.
			results := pragmas
				select: [ :pragma | pragma method selector = self key ]
				thenCollect: [ :pragma | pragma argumentAt: 1 ] ].
	^ results
		ifNil: [ nil ]
		ifNotNil: [ :r | r ifEmpty: [ nil ] ifNotEmpty: [ :c | c first ] ]
]]]

All tests should pass now.

!!!! Refactoring

This logic could be done once, lazily or not, to speed up the process afterwards. Also, we are expecting the pragma to be on a method of the instance, not the class.

Let's extract the logic that finds the adapter class for a single class.

% ${changes:path=code/022-EDAACandidate_adapterClassesFromPragmaIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragmaIn: annotatedClass
	| pragmas |
	pragmas := Pragma
		allNamed: #edaAdapterClass:
		inAndBelow: annotatedClass.
	^ pragmas
		select: [ :pragma | pragma method selector = self key ]
		thenCollect: [ :pragma | pragma argumentAt: 1 ]
]]]

The new ""adapterClassFromPragma"" method becomes:

% ${changes:path=code/023-EDAACandidate_adapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassFromPragma
	| results annotatedClasses |
	results := OrderedCollection new.
	annotatedClasses := EDAAPragmaBasedCandidateAdapterClassNameResolver
		traitUsers.
	annotatedClasses
		do:
			[ :annotatedClass | results addAll: (self adapterClassesFromPragmaIn: annotatedClass) ].
	^ results
		ifNil: [ nil ]
		ifNotNil: [ :r | r ifEmpty: [ nil ] ifNotEmpty: [ :c | c first ] ]
]]]

!!! Supporting annotations on class-side methods

There's no reason to constrain us to instance-side methods. Let's change our current test just to illustrate annotations can be used in class-side methods.

% ${changes:path=code/024-EDAACandidateTest_testAdapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassFromPragma
	| candidate |
	candidate := EDAACandidate withKey: 'arbitraryKey' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore.
	candidate := EDAACandidate
		withKey: 'classSideArbitraryKey'
		value: nil.
	self assert: candidate adapterClass equals: #EDAAMemoryEventStore
]]]

The annotated method would be similar to the one we've been using so far.

% ${changes:path=code/025-EDAACandidateTest_class_classSideArbitraryKey.ombu}$
[[[methodDefinition=true|lineNumber=true
classSideArbitraryKey
	"Maps 'classSideArbitraryKey' to #EDAAMemoryventStore"

	<edaAdapterClass: #EDAAMemoryEventStore>
	^ self
]]]

Now that the test is failing, we just need to take into account class-side methods when looking for the annotations.

% ${changes:path=code/026-EDAACandidate_adapterClassesFromPragmaIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragmaIn: annotatedClass
	| pragmas |
	pragmas := (Pragma
		allNamed: #edaAdapterClass:
		inAndBelow: annotatedClass) asOrderedCollection.
	pragmas
		addAll: (Pragma allNamed: #edaAdapterClass: inAndBelow: annotatedClass class).
	^ pragmas
		select: [ :pragma | pragma method selector = self key ]
		thenCollect: [ :pragma | pragma argumentAt: 1 ]
]]]

!!! Default keys for current PharoEDA adapters
